/*
 * This build file was auto generated by 'gigawatt'
 * @author d7392
 * @date 31-08-2017 14.22
 */

// [plugins] this block must be the first
plugins {
	// support for groovy
	id 'groovy'
	// autogenerate eclipse project files
	id 'eclipse'
	// create an html index linking every report generated
	id 'build-dashboard'
	// view of the project (jars used, navigable source tree)
	id 'project-report'
	// groovy code linter
	id 'codenarc'
	// test code coverage plugin
	id 'net.saliman.cobertura' version '2.5.0'
	// integration with nexus repository (and more)
	id 'maven'
}

// [general] configuration
project.ext {
	groovyVersion       = '2.4.12'
	gradleVersion       = '4.1'
	spockVersion        = '1.1-groovy-2.4'
	codenarcVersion     = '0.27.0'
	slf4jVersion        = '1.7.25'
	hikariVersion       = '2.6.3'
	jdbcVersion         = '6.0.6'
}

project.with {
	//project.name is set in the settings.gradle with rootProject.name
	group                 "it.italiaonline.rnd"
	version               "0.1.1" // (remove -SNAPSHOT for releases)
	description           "A 'gigawatt' powered project."
	wrapper.gradleVersion "$gradleVersion"
}
// [crosscompile] source and target java version
allprojects {
	sourceCompatibility = '1.8'
	targetCompatibility = sourceCompatibility
}

repositories {
	jcenter()

	// testing nexus server reachability
	Integer.metaClass.getSeconds = { delegate * 1000 }
	try {
		if ( new URL(nexusUrl).getText(connectTimeout: 5.seconds).contains('Sonatype Nexus') ) {
			logger.warn("Adding maven repositories, nexus <$nexusUrl>")
			maven { url "${nexusUrl}/content/repositories/snapshots" }
			maven { url "${nexusUrl}/content/repositories/releases"  }
		} else {
			logger.warn("maven repos skipped cause <$nexusUrl> is not reachable!")
		}
	} catch (IOException e) {
		def host = nexusUrl.find($/(?<=https?://)[^/]+/$)
		logger.warn("Problems adding maven repos <$host>!")
	}
}

dependencies {
	// Groovy language support
	compile "org.codehaus.groovy:groovy-all:$groovyVersion"

	// Slf4j dependencies
	compile "org.slf4j:slf4j-api:$slf4jVersion"

	// database
	compile "mysql:mysql-connector-java:$jdbcVersion"
	compile "com.zaxxer:HikariCP:$hikariVersion"


	// We use the awesome Spock testing and specification framework
	testCompile "org.spockframework:spock-core:$spockVersion"
}

// codenarc groovy source analyses
codenarc{
	toolVersion = "$codenarcVersion"

	codenarcMain {
		configFile = rootProject.file('config/codenarc/ruleset.groovy')
		exclude "**/package-info.*"
		ignoreFailures true       // does not block builds
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
	codenarcTest {
		configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
		ignoreFailures true
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
}

// [maven] upload to http nexus configuration
configurations {
	deployerJars
}
dependencies {
	// needed to deploy on nexus via http
	deployerJars "org.apache.maven.wagon:wagon-http:2.+"
}
uploadArchives {
	repositories.mavenDeployer {
		configuration = configurations.deployerJars
		repository(url: "${nexusUrl}/content/repositories/releases") {
			authentication(userName: nexusUsername, password: nexusPassword)
		}
		snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
			authentication(userName: nexusUsername, password: nexusPassword)
		}
	}
}

// [tasks] configuration //
jar {
	// execute check task when create the jar
	dependsOn 'check'
}

// [tasks] definition
task listJars {
	description = 'print out the jars used by the project'
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
}
task unitTest(type: Test) {
	exclude '**/*ISpec*'
	exclude '**/*FSpec*'
}
// vim: ft=groovy:fdm=indent
